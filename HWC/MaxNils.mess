## SemanticAnalyzer.java
- Why are ReturnChecker, TypeChecker, DoubleDeclChecker, and ClassChecker defined as internal classes to the SemanticAnalyzer class when they don't actually use any of its functionality and thus could be just as well at the toplevel, or even rolled out into their own files?
- Why are new instances of the checkers created for each class?
- Why is currentMethod a class field in ReturnChecker when it's never used outside of methodDecl?
- Why is currentClass a class field in TypeChecker when it is never read?
- Constructs like `ok |= (b == null ? false : b)` are rather hard to decipher. Instead, use `if(b != null && b) ok = true;`
- Instead of doing the whole Boolean turn-about in ReturnChecker, you could simply use an exception to signal that a return was found and catch it in check. If you don't catch anything, throw the proper exception.
- You should break up long logical operator chains over multiple lines.
- It wouldn't hurt to use full names for variables instead of shorthands like `rcvr`, `mthd`, `ms`, `cs`, etc.
- The use of the return value in `Scope.put` to determine whether the element already existed and inserting it in the same call is confusing.
- Is there a particular reason you are using this "Scope" class rather than using the AstVisitor's second function argument to pass around a table of the currently visible bindings?
- Why is the `curr` in `ClassChecker.classDecl` declared outside of the for loop when it isn't used elsewhere?

## TypeSymbolMaker.java
- Why is the Scope class used at all, when the scoping isn't needed here at all? A simple table would be sufficient and not as misleading.
- In `registerType` you are also checking for double declaration when the DoubleDeclChecker already does so as well. Duplicating functionality like this is not great.
- Instead of keeping class-local fields to denote the "current" elements, you could use the visitor's second argument to pass that information around. If both the class and method are needed you could encapsulate them in a tuple.

## Overall
It's aight. There's nothing too severe that jumped out at me and most of my complaints are minor ones. From everything that I've mentioned, perhaps the biggest targets is the use of this Scope class, which only complicates the design without much overall gain.